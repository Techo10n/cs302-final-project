-- Project Title: LemOn; Author: Zechariah Frierson

DROP TABLE IF EXISTS Song_Artist;
DROP TABLE IF EXISTS Playlist_Song;
DROP TABLE IF EXISTS Comment;
DROP TABLE IF EXISTS Playlist;
DROP TABLE IF EXISTS Song;
DROP TABLE IF EXISTS Album;
DROP TABLE IF EXISTS Artist;
DROP TABLE IF EXISTS User;


CREATE TABLE User (
    UserID INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    Username VARCHAR(50) NOT NULL,
    Email VARCHAR(100) NOT NULL,
    Password VARCHAR(100) NOT NULL,
    Birthdate DATE,
    Country VARCHAR(50)
);

CREATE TABLE Artist (
    ArtistID INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    UserID INT UNSIGNED,
    ArtistName VARCHAR(100) NOT NULL,
    Description TEXT,
    FoundedDate DATE NOT NULL,
    TotalViews INT UNSIGNED DEFAULT 0 NOT NULL,
    TotalLikes INT UNSIGNED DEFAULT 0 NOT NULL,
    FOREIGN KEY (UserID) REFERENCES User(UserID)
        ON DELETE SET NULL
        ON UPDATE CASCADE
);

CREATE TABLE Album (
    AlbumID INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    Title VARCHAR(100) NOT NULL,
    NumSongs TINYINT UNSIGNED DEFAULT 1 NOT NULL,
    ReleaseDate DATE NOT NULL,
    Genre VARCHAR(50),
    ArtistID INT UNSIGNED,
    FOREIGN KEY (ArtistID) REFERENCES Artist(ArtistID)
        ON DELETE RESTRICT
        ON UPDATE CASCADE
);

CREATE TABLE Song (
    SongID INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    Title VARCHAR(100) NOT NULL,
    Duration SMALLINT UNSIGNED NOT NULL,
    Genre VARCHAR(50),
    ReleaseDate DATE NOT NULL,
    Views INT UNSIGNED DEFAULT 0 NOT NULL,
    Likes INT UNSIGNED DEFAULT 0 NOT NULL,
    AlbumID INT UNSIGNED,
    FOREIGN KEY (AlbumID) REFERENCES Album(AlbumID)
        ON DELETE CASCADE
        ON UPDATE CASCADE
);

CREATE TABLE Song_Artist (
    SongID INT UNSIGNED,
    ArtistID INT UNSIGNED,
    PRIMARY KEY (SongID, ArtistID),
    FOREIGN KEY (SongID) REFERENCES Song(SongID)
        ON DELETE CASCADE
        ON UPDATE CASCADE,
    FOREIGN KEY (ArtistID) REFERENCES Artist(ArtistID)
        ON DELETE RESTRICT
        ON UPDATE CASCADE
);

CREATE TABLE Playlist (
    PlaylistID INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    Title VARCHAR(100) NOT NULL,
    UserID INT UNSIGNED,
    Description TEXT,
    CreationDate DATE NOT NULL,
    NumSongs SMALLINT UNSIGNED DEFAULT 0 NOT NULL,
    TotalDuration MEDIUMINT UNSIGNED DEFAULT 0 NOT NULL,
    Public BOOLEAN DEFAULT FALSE NOT NULL,
    FOREIGN KEY (UserID) REFERENCES User(UserID)
);

CREATE TABLE Playlist_Song (
    PlaylistID INT UNSIGNED,
    SongID INT UNSIGNED,
    PRIMARY KEY (PlaylistID, SongID),
    FOREIGN KEY (PlaylistID) REFERENCES Playlist(PlaylistID)
        ON DELETE CASCADE
        ON UPDATE CASCADE,
    FOREIGN KEY (SongID) REFERENCES Song(SongID)
        ON DELETE CASCADE
        ON UPDATE CASCADE
);

CREATE TABLE Comment (
    CommentID INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    UserID INT UNSIGNED,
    SongID INT UNSIGNED,
    Text TEXT,
    PostedDateTime DATETIME DEFAULT CURRENT_TIMESTAMP NOT NULL,
    LikeCount INT UNSIGNED DEFAULT 0 NOT NULL,
    DislikeCount INT UNSIGNED DEFAULT 0 NOT NULL,
    IsReply BOOLEAN DEFAULT FALSE NOT NULL,
    FOREIGN KEY (UserID) REFERENCES User(UserID)
        ON DELETE SET NULL
        ON UPDATE CASCADE,
    FOREIGN KEY (SongID) REFERENCES Song(SongID)
        ON DELETE CASCADE
        ON UPDATE CASCADE
);

-- ================= DELETE TRIGGER =================
DROP TRIGGER IF EXISTS UpdatePlaylistOnDeleteUser;
DELIMITER //
CREATE TRIGGER UpdatePlaylistOnDeleteUser
BEFORE DELETE ON User
FOR EACH ROW
BEGIN
    IF EXISTS (SELECT * FROM Playlist WHERE UserID = OLD.UserID AND Public = 0) THEN
        DELETE FROM Playlist WHERE UserID = OLD.UserID;
    ELSE
        UPDATE Playlist SET UserID = NULL WHERE UserID = OLD.UserID;
    END IF;
END;
//
DELIMITER ;